name: 'CI'

on:
  push:
    # paths:
    #   - '**.(ts|js|json|yml)'
  pull_request:
    # paths:
    #   - '**.(ts|js|json|yml)'

jobs:
  tests:
    name: Test
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:latest
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Expose GIT Commit Data
        uses: rlespinasse/git-commit-data-action@v1.x

      - name: Install the Interpreter
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
          cache: yarn

      - name: Load the Cached Dependencies
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies
        run: yarn install
      - name: Execute the Development Build
        run: yarn build

      - name: Test > InMemory Transport
        run: yarn test

      - name: Test > IO Redis Transport
        run: yarn test:ci
        env:
          TEST_TRANSPORT: ioredis

      - name: Display Commit Message
        run: echo "${{ env.GIT_COMMIT_MESSAGE_SUBJECT_SANITIZED }}"

    outputs:
      commit_message: ${{ env.GIT_COMMIT_MESSAGE_SUBJECT_SANITIZED }}
      is_release_commit: ${{ startsWith(env.GIT_COMMIT_MESSAGE_SUBJECT_SANITIZED, 'Release ') }}

  # Run publish only when the branch is matches, and the commit message could match a release pattern.
  publish:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: tests
    if: ${{ needs.tests.outputs.is_release_commit == true && success() && github.ref == 'refs/heads/main' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install the Interpreter
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
          cache: yarn

      - name: Load the Cached Dependencies
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies
        run: yarn install
      - name: Execute the Production Build
        run: yarn build:prod

      - name: Publish to NPM
        id: npm-publish
        uses: pascalgn/npm-publish-action@1.3.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Publish to GPR
        if: ${{ steps.npm-publish.outputs.changed == true }}
        run: |
          yarn config set registry-url https://npm.pkg.github.com
          yarn publish --non-interactive
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      changed: ${{ steps.npm-publish.outputs.changed }}

  release:
    name: Release GH
    runs-on: ubuntu-latest
    needs: publish
    if: ${{ success() && needs.publish.outputs.changed == true }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: echo "$(echo ${{ needs.tests.outputs.commit_message }} | sed -r 's/Release //')"
        tag_name: echo "$(echo ${{ needs.tests.outputs.commit_message }} | sed -r 's/Release /v/')"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [publish, release]
    if: ${{ success() &&  needs.publish.outputs.changed }}

    steps:
      - name: Notify the Author(s)
        uses: Ilshidur/action-slack@2.1.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: GitHub Release Notification
          SLACK_AVATAR: sender
        with:
          args: '[${{ github.repository }}] Published the release [${{ env.RELEASE_NAME }}]'



